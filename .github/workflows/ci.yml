name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Lint, Format, Type-check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Do NOT use cache: pnpm here, it would try to run pnpm before it's installed
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          check-latest: true

      # Install pnpm (guaranteed on PATH for all OSes)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      # Cache pnpm store AFTER pnpm exists
      - name: Get pnpm store path
        id: pnpm-store
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Check pnpm version
        run: pnpm -v

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Check formatting
        run: pnpm format

      - name: Build (type-check)
        run: pnpm build

  test:
    name: Test (Node ${{ matrix.node }} on ${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: ['20.x', '22.x']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Do NOT use cache: pnpm here either
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store path
        id: pnpm-store
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Check pnpm version
        run: pnpm -v

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests (with coverage)
        if: matrix.os == 'ubuntu-latest' && startsWith(matrix.node, '20.')
        run: pnpm test -- --coverage --coverage.reporter=lcov

      - name: Upload coverage artifact
        if: matrix.os == 'ubuntu-latest' && startsWith(matrix.node, '20.')
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && startsWith(matrix.node, '20.')
        uses: codecov/codecov-action@v4
        with:
          files: coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run tests
        if: matrix.os != 'ubuntu-latest' || !startsWith(matrix.node, '20.')
        run: pnpm test

  summary:
    name: CI Summary
    needs: [quality, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Evaluate job results
        run: |
          echo "quality: ${{ needs.quality.result }}"
          echo "test:    ${{ needs.test.result }}"
          if [ "${{ needs.quality.result }}" != "success" ] || [ "${{ needs.test.result }}" != "success" ]; then
            echo "One or more required jobs failed."
            exit 1
          fi
          echo "All required jobs succeeded."
